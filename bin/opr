#!/usr/bin/env python3
# This file is placed in the Public Domain.
# pylint: disable=R,C,W,C0302

"""object programming runtime"""


import atexit
import importlib
import os
import readline
import rlcompleter
import signal
import sys
import termios
import threading
import time


sys.path.insert(0, os.getcwd())


from opr.hdl import Command, Event, Handler, parse
from opr.obj import Class, Object, Wd, keys, last, printable, update
from opr.obj import find, fntime, items, save, update
from opr.run import Cfg, command, scan, scandir
from opr.utl import elapsed


Wd.workdir = os.path.expanduser("~/.opr")


starttime = time.time()


class CLI(Handler):

    @staticmethod
    def announce(txt):
        CLI.raw(txt)

    @staticmethod
    def raw(txt):
        print(txt)


class Console(CLI):

    @staticmethod
    def handle(event):
        Command.handle(event)
        event.wait()

    def poll(self):
        event = Event()
        event.txt = input("> ")
        event.orig = repr(self)
        return event


class Completer(rlcompleter.Completer):

    def __init__(self, options):
        super().__init__()
        self.options = options
 
    def complete(self, text, state):
        if state == 0:
            if text:
                self.matches = [s for s in self.options if s and s.startswith(text)]
            else:
                self.matches = self.options[:]
        try:
            return self.matches[state]
        except IndexError:
            return None


class Evt(Event):

    def wait(self):
        Event.wait(self)
        if self._exc:
            print(from_exception(self._exc))


def banner(cfg):
    print(
          "OPR started at %s %s" % (
                                     time.ctime(time.time()).replace("  ", " "),
                                     printable(cfg, "debug,verbose")
                                    )
         )


def boot():
    signal.signal(signal.SIGHUP, hup)
    setcompleter(keys(Command.cmd))
    txt = ' '.join(sys.argv[1:])
    cfg = parse(txt)
    update(Cfg, cfg)
    return cfg


def hup(_sig, _frame):
    print("signal 15 called")
    sys.stdout.flush()


def importer(pname, mname):
    modname = "%s.%s" % (pname, mname)
    mod = importlib.import_module(modname, pname)
    scan(mod)


def init(pname, mname):
    modname = "%s.%s" % (pname, mname)
    mod = importlib.import_module(modname, pname)
    if "init" in dir(mod):
        mod.init()    
        
def isopt(ostr):
    for opt in ostr:
        if opt in Cfg.opts:
            return True
    return False


def setcompleter(optionlist):
    completer = Completer(optionlist)
    readline.set_completer(completer.complete)
    readline.parse_and_bind("tab: complete")
    atexit.register(lambda: readline.set_completer(None))


def wrap(func):
    fds = sys.stdin.fileno()
    gotterm = True
    try:
        old = termios.tcgetattr(fds)
    except termios.error:
        gotterm = False
    readline.redisplay()
    try:
        func()
    except (EOFError, KeyboardInterrupt):
        print("")
    finally:
        if gotterm:
            termios.tcsetattr(fds, termios.TCSADRAIN, old)


def main():
    cfg = boot()
    scandir("mod", importer)
    if cfg.txt:
        cli = CLI()
        return command(cli, cfg.txt)
    if Cfg.console:
        banner(cfg)
        scandir("mod", init)
        csl = Console()
        csl.start()
        csl.wait()


wrap(main)
 