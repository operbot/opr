#!/usr/bin/env python3
# This file is placed in the Public Domain.
# pylint: disable=C0413,W0613


"tinder"


import importlib
import os
import shutil
import sys
import termios
import time
import traceback


sys.path.insert(0, os.getcwd())


from opr import Object, Wd,  elapsed, get, keys, name, printable
from opr import Client, Command, Event, parse, scandir, scan
from opr.run import Cfg

Cfg.debug = True
Cfg.threaded = False
Cfg.verbose = False
Cfg.version = "103"
Wd.workdir = ".test"


events = []
results = []


param = Object()
param.add = ["test@shell", "bart", ""]
param.cfg = ["server=localhost", ""]
param.dne = ["test4", ""]
param.rem = ["reddit", ""]
param.dpl = ["reddit title,summary,link", ""]
param.log = ["test1", ""]
param.flt = ["0", ""]
param.fnd = ["cfg", "log", "rss", "log txt==test", "cfg server==localhost", "rss rss==reddit"]
param.rss = ["https://www.reddit.com/r/python/.rss"]
param.tdo = ["test4", ""]


def cprint(txt):
    print(txt)
    sys.stdout.flush()


class CLI(Client):

    def __init__(self):
        Client.__init__(self)

    def raw(self, txt):
        if Cfg.verbose:
            cprint(txt)


def consume(evts):
    fixed = []
    res = []
    for evt in evts:
        evt.wait()
        fixed.append(evt)
    for fix in fixed:
        try:
            evts.remove(fix)
        except ValueError:
            continue
    return res


def from_exception(exc, txt="", sep=" "):
    result = []
    for frm in traceback.extract_tb(exc.__traceback__):
        result.append("%s:%s" % (os.sep.join(frm.filename.split(os.sep)[-2:]), frm.lineno))
    return "%s(%s) %s" % (name(exc), exc, " ".join(result))


def importer(packagename, modulename):
    name = "%s.%s" % (packagename, modulename)
    try:
        mod = importlib.import_module(name, packagename)
        scan(mod)
    except Exception as ex:
        print(from_exception(ex))


def payload(cli):
    cmds = sorted(Command.cmd)
    _nr = 0
    for cmd in cmds:
        for ex in get(param, cmd, [""]):
            evt = Event()
            evt.txt = cmd + " " + ex
            evt.orig = repr(cli)
            evt.parse()
            #c.put(e)
            cli.handle(evt)
            events.append(evt)
            _nr += 1
    return _nr


def wrap(func):
    fds = sys.stdin.fileno()
    old = termios.tcgetattr(fds)
    try:
        func()
    except (EOFError, KeyboardInterrupt):
        cprint("")
    finally:
        termios.tcsetattr(fds, termios.TCSADRAIN, old)


def main():
    cprint("OPERBOT tinder start at %s" % time.ctime(time.time()).replace("  ", " "))
    if os.path.exists(Wd.workdir):
        shutil.rmtree(Wd.workdir)
    txt = " ".join(sys.argv[1:])
    cfg = parse(txt)
    if "v" in cfg.opts:
        Cfg.verbose = True
    cprint(printable(Cfg, keys(Cfg)))
    scandir("op", importer)
    scandir("oper", importer)
    scandir("opermod", importer)
    cli = CLI()
    cli.start()
    nrs = cfg.index or 20
    res = 1
    thrs = []
    starttime = time.time()
    for _nr in range(nrs):
        payload(cli)
    if thrs:
        for thr in thrs:
            res += thr.join()
    else:
        res = nrs * len(Command.cmd)
    if not res:
        res = 1
    consume(events)
    endtime = time.time()
    print("%s %s %s (%s remaining)" %  (
                                        elapsed(endtime - starttime),
                                        res,
                                        (endtime - starttime)/res, len(events))
                                       )


wrap(main)
