#!/usr/bin/env python3.11
# This file is placed in the Public Domain.


import importlib
import os
import shutil
import sys
import termios
import time
import traceback


sys.path.insert(0, os.getcwd())


from opr.obj import Object, Wd, keys, name, printable, update
from opr.hdl import Callback, Command, Event, Handler, parse
from opr.run import Cfg, scan, scandir, from_exception
from opr.thr import launch
from opr.utl import elapsed




class OPRERR(Exception):

    pass


Cfg.debug = True
Cfg.threaded = False
Cfg.verbose = False
Cfg.version = "103"
Wd.workdir = ".test"


events = []
results = []


param = Object()
param.cfg = ["server=localhost"]
param.cmd = [""]
param.cor = ["bthate@gmail.com"]
param.dlt = ["test@shell"]
param.dne = ["test4"]
param.dpl = ["reddit title,summary,link"]
param.eml = ["bthate@gmail.com"]
param.flt = ["", "0"]
param.fnd = ["config", "rss", "log", "todo", "user"]
param.ftc = [""]
param.log = ["test1"]
param.mbx = ["~/25-01-2013"]
param.met = ["test@shell"]
param.mre = [""]
param.nme = ["reddit reddit"]
param.pwd = ["bart test"]
param.rem = ["reddit"]
param.rse = ["yoooo!"]
param.rss = ["https://www.reddit.com/r/python/.rss"]
param.sts = [""]
param.tdo = ["test4", ""]
param.thr = [""]
param.upt = [""]


def cprint(txt):
    print(txt)
    sys.stdout.flush()


class CLI(Handler):

    def __init__(self):
        Handler.__init__(self)

    def raw(self, txt):
        if Cfg.verbose:
            cprint(txt)


class Evt(Event):

    def wait(self):
        Event.wait(self)
        if self._exc and Cfg.verbose:
            cprint(from_exception(self._exc))


def consume(evts):
    fixed = []
    res = []
    for evt in evts:
        evt.wait()
        fixed.append(evt)
    for fix in fixed:
        try:
            evts.remove(fix)
        except ValueError:
            continue
    return res


def importer(packagename, modulename):
    name = "%s.%s" % (packagename, modulename)
    try:
        mod = importlib.import_module(name, packagename)
        scan(mod)
    except Exception as ex:
        cprint(from_exception(ex))


def payload(cli):
    cmds = ["log", "rss", "cfg", "tdo"]
    cmds.extend(sorted(Command.cmd))
    nmr = 0
    for cmd in cmds:
        for ex in getattr(param, cmd, [""]):
            evt = Evt()
            evt.txt = cmd + " " + ex
            evt.orig = repr(cli)
            cli.put(evt)
            events.append(evt)
            nmr += 1
    return nmr


def rse(event):
    raise OPRERR(event.txt)


Command.add(rse)


def wrap(func):
    fds = sys.stdin.fileno()
    old = termios.tcgetattr(fds)
    try:
        func()
    except (EOFError, KeyboardInterrupt):
        cprint("")
    finally:
        termios.tcsetattr(fds, termios.TCSADRAIN, old)
        if Cfg.verbose:
            for err in Callback.errors:
                cprint(from_exception(err))


def main():
    cprint("OPR tinder start at %s" % time.ctime(time.time()).replace("  ", " "))
    if os.path.exists(Wd.workdir):
        shutil.rmtree(Wd.workdir)
    txt = " ".join(sys.argv[1:])
    cfg = parse(txt)
    update(Cfg, cfg)
    cprint(printable(Cfg, keys(Cfg)))
    scandir("mod", importer)
    cprint("commands: " +  ",".join(sorted(Command.cmd)))
    cli = CLI()
    cli.start()
    nrs = cfg.index or 20
    res = 1
    thrs = []
    starttime = time.time()
    for nmr in range(nrs):
        thrs.append(launch(payload, cli))
    for thr in thrs:
        thr.join()
    consume(events)
    endtime = time.time()
    cprint("%s elapsed %s middled %s remaining %s" %  (
                                     printable(Cfg, keys(Cfg)),
                                     elapsed(endtime - starttime),
                                     (endtime - starttime)/res,
                                     len(events))
                                    )


wrap(main)
